    scalar Date

    type Attendance {
        id: ID!
        clientId: ID!
        productId: ID!
        checkIn: Date!
        product: Product
        client: Client
    }

    type Product {
        id: ID!
        name: String!
        description: String!
        price: Int!
        productType: ProductType!
        sessionCounter: Int
        expiresIn: Int
    }

    type Client {
        id: ID!
        name: String!
        email: String!
        phone: String!
        birthdate: Date!
        age: Int!
        waiver: Boolean!
        membershipStatus: MembershipStatus!
        product: Product
        clientSessionCounter: Int
        clientExpiresIn: Date
        attendance: [Attendance]
        documents: [ClientDocument]
    }

    type ClientDocument {
        id: ID!
        clientId: ID!
        documentName: String!
        documentType: DocumentType!
        documentURL: String!
        client: Client
    }

    type User {
        id: ID!
        name: String!
        email: String!
        username: String!
        password: String!
        isAdmin: Boolean!
    }

    input AddAttendanceInput {
        clientId: ID!
        productId: ID!
    }

    input AddProductInput {
        name: String!
        description: String!
        price: Int!
        productType: ProductType!
        sessionCounter: Int
        expiresIn: Int
    }

    input UpdateProductInput {
        id: ID!
        name: String
        description: String
        price: Int
        productType: ProductType
        sessionCounter: Int
        expiresIn: Int
    }

    input AddClientInput {
        name: String!
        email: String!
        phone: String!
        birthdate: String!
        waiver: Boolean!
    }
    input UpdateClientInput {
        id: ID!
        name: String
        email: String
        phone: String
        birthdate: String
        waiver: Boolean
    }

    input AddClientDocumentInput {
        clientId: ID!
        documentName: String!
        documentType: String!
        documentURL: String!
    }
    input UpdateClientDocumentInput {
        id: ID!
        clientId: ID!
        documentName: String
        documentType: String
        documentURL: String
    }

    input AddUserInput {
        name: String!
        email: String!
        username: String!
        password: String!
        isAdmin: Boolean!
    }
    input UpdateUserInput {
        name: String
        email: String
        username: String
        password: String
        isAdmin: Boolean
    }

    type Query {
        products: [Product]
        clients: [Client]
        documents: [ClientDocument]
        users: [User]
        attendances: [Attendance]
        attendance(ID: ID!) : Attendance
        product(ID: ID!) : Product
        client(ID: ID!) : Client
        document(ID: ID!) : ClientDocument
        user(ID: ID!) : User
    }

    enum MembershipStatus {
        active
        inactive
    }
    enum ProductType {
        EVENT
        SESSION_BASED
        TIME_BASED
    }
    enum DocumentType {
        WAIVER
        IDENTIFICATION
        PHOTO
    }

    type AuthPayload {
        token: String
        user: User
        refreshToken: String
    }


    type Mutation { 
        
        addAttendance(input: AddAttendanceInput!): Attendance

        deleteAttendance(id: ID!): Attendance
        
        addClient(input: AddClientInput! productId: ID): Client

        updateClient(input: UpdateClientInput! productId: ID): Client
        
        deleteClient(id: ID!): Client

        addClientDocument(input: AddClientDocumentInput!): ClientDocument

        updateClientDocument(input: UpdateClientDocumentInput!): ClientDocument

        deleteClientDocument(id: ID!): ClientDocument

        addProduct(input: AddProductInput!): Product
        
        updateProduct(input: UpdateProductInput!): Product
        
        deleteProduct(id: ID!): Product

        registerUser(input: AddUserInput!): User
        
        updateUser(id: ID! input: UpdateUserInput): User

        deleteUser(id: ID!): User

        loginUser(username: String!, password: String!): AuthPayload


    }